// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1 "auth-service/internal/gen/auth/v1"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// GetUserProfile provides a mock function with given fields: _a0
func (_m *IAuthService) GetUserProfile(_a0 *v1.GetProfileRequest) (*v1.User, error) {
	ret := _m.Called(_a0)

	var r0 *v1.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.GetProfileRequest) (*v1.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*v1.GetProfileRequest) *v1.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.GetProfileRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfileByPhone provides a mock function with given fields: _a0
func (_m *IAuthService) GetUserProfileByPhone(_a0 *v1.GetProfileByPhoneNumberRequest) (*v1.User, error) {
	ret := _m.Called(_a0)

	var r0 *v1.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.GetProfileByPhoneNumberRequest) (*v1.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*v1.GetProfileByPhoneNumberRequest) *v1.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.GetProfileByPhoneNumberRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleSignUp provides a mock function with given fields: _a0
func (_m *IAuthService) HandleSignUp(_a0 *v1.SignupWithPhoneNumberRequest) (*v1.User, error) {
	ret := _m.Called(_a0)

	var r0 *v1.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.SignupWithPhoneNumberRequest) (*v1.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*v1.SignupWithPhoneNumberRequest) *v1.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.SignupWithPhoneNumberRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginWithPhoneNumber provides a mock function with given fields: request
func (_m *IAuthService) LoginWithPhoneNumber(request *v1.LoginWithPhoneNumberRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.LoginWithPhoneNumberRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePhoneNumberLogin provides a mock function with given fields: request
func (_m *IAuthService) ValidatePhoneNumberLogin(request *v1.ValidatePhoneNumberLoginRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ValidatePhoneNumberLoginRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyOtp provides a mock function with given fields: request
func (_m *IAuthService) VerifyOtp(request *v1.VerifyPhoneNumberRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.VerifyPhoneNumberRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
