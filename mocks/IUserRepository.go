// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	models "auth-service/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: userId
func (_m *IUserRepository) GetUser(userId int32) (*models.User, error) {
	ret := _m.Called(userId)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (*models.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int32) *models.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByPhoneNumberAndCountry provides a mock function with given fields: countryCode, phoneNumber
func (_m *IUserRepository) GetUserByPhoneNumberAndCountry(countryCode int32, phoneNumber string) (*models.User, error) {
	ret := _m.Called(countryCode, phoneNumber)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, string) (*models.User, error)); ok {
		return rf(countryCode, phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(int32, string) *models.User); ok {
		r0 = rf(countryCode, phoneNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, string) error); ok {
		r1 = rf(countryCode, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveUser provides a mock function with given fields: user
func (_m *IUserRepository) SaveUser(user *models.User) (*models.User, error) {
	ret := _m.Called(user)

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (*models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVerifiedTrueById provides a mock function with given fields: id
func (_m *IUserRepository) UpdateVerifiedTrueById(id int32) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
